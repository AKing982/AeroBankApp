
 CREATE TABLE IF NOT EXISTS Users
  (
     userID INT PRIMARY KEY auto_increment,
     userName VARCHAR(225) NOT NULL,
     firstName VARCHAR(225) NOT NULL,
     lastName VARCHAR(225) NOT NULL,
     email VARCHAR(225) NOT NULL,
     password VARCHAR(225) NOT NULL,
     pinNumber VARCHAR(225) NOT NULL,
     accountNumber VARCHAR(225) NOT NULL,
     role VARCHAR(225) NOT NULL,
     profileImgUrl VARCHAR(255),
     isAdmin BOOL,
     isEnabled BOOL
  );

   CREATE TABLE IF NOT EXISTS Account
   (
      acctID INT AUTO_INCREMENT NOT NULL,
      accountCodeID BIGINT NOT NULL,
      accountPropsID BIGINT,
      userID INT NOT NULL,
      aSecID INT,
      accountName VARCHAR(225) NOT NULL,
      balance DECIMAL(10, 3) NOT NULL,
      interest DECIMAL(10, 3) NOT NULL,
      accountType VARCHAR(225) NOT NULL,
      hasDividend BOOL,
      isRentAccount BOOL,
      hasMortgage BOOL,

      FOREIGN KEY (userID) REFERENCES Users(userID),
      PRIMARY KEY(acctID)
  );

  CREATE TABLE IF NOT EXISTS AccountCode
  (
    acctCodeID BIGINT AUTO_INCREMENT NOT NULL,
    first_initial_segment VARCHAR(1) NOT NULL,
    last_initial_segment VARCHAR(1) NOT NULL,
    userID INT NOT NULL,
    accountType VARCHAR(4) NOT NULL,
    year_segment INT NOT NULL,
    account_segment INT NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users (userID),
    PRIMARY KEY(acctCodeID)
  );

  CREATE TABLE IF NOT EXISTS Account_Users
   (
      acctID INT NOT NULL,
      userID INT NOT NULL,
      PRIMARY KEY(acctID, userID),
      FOREIGN KEY(acctID) REFERENCES Account(acctID),
      FOREIGN KEY(userID) REFERENCES Users(userID)
   );

  CREATE TABLE IF NOT EXISTS SchedulerCriteria
   (
       scheduleCriteriaID BIGINT AUTO_INCREMENT NOT NULL,
       schedulerUserID INT NOT NULL,
       transactionScheduleID BIGINT NOT NULL,
       scheduleType ENUM('ONCE', 'DAILY', 'MONTHLY', 'WEEKLY', 'BI_DAILY', 'BI_WEEKLY') NOT NULL,
       status ENUM('ACTIVE', 'PAUSED', 'COMPLETED') DEFAULT 'ACTIVE',
       priority INT NOT NULL,
       lastRunTime DATETIME,
       nextRunTime DATETIME,
       PRIMARY KEY (scheduleCriteriaID),
       FOREIGN KEY (schedulerUserID) REFERENCES Users(userID)
   );

 CREATE TABLE IF NOT EXISTS BillPayment
 (
    paymentID BIGINT auto_increment NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    payeeName VARCHAR(255) NOT NULL,
    paymentAmount DECIMAL(10, 3) NOT NULL,
    paymentDescription VARCHAR(255) NOT NULL,
    paymentType VARCHAR(255) NOT NULL,
    postedDate datetime NOT NULL,
    paymentScheduleID BIGINT NOT NULL,

    PRIMARY KEY (paymentID)
 );

 CREATE TABLE IF NOT EXISTS BillPaymentSchedule
 (
    paymentScheduleID BIGINT auto_increment NOT NULL,
    postedDate datetime NOT NULL,
    paymentDueDate datetime NOT NULL,
    endDate datetime NOT NULL,
    frequency ENUM ('DAILY', 'WEEKLY', 'BI_WEEKLY', 'MONTHLY'),
    paymentHistoryID BIGINT NOT NULL,
    scheduleStatus ENUM ('PENDING', 'CANCELED', 'DONE'),
    isRecurring BOOLEAN DEFAULT FALSE,
    autoPayEnabled BOOLEAN DEFAULT FALSE,


    PRIMARY KEY(paymentScheduleID)
 );

 CREATE TABLE IF NOT EXISTS BillPayees
 (
    payeeID BIGINT AUTO_INCREMENT NOT NULL,
    userID INT NOT NULL,
    payeeName VARCHAR(50) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    FOREIGN KEY (userID) REFERENCES Users(userID),
    PRIMARY KEY(payeeID)
 );

 CREATE TABLE IF NOT EXISTS BillPaymentHistory
 (
    paymentHistoryID BIGINT auto_increment NOT NULL,
    nextPaymentDate DATETIME NOT NULL,
    lastPaymentDate DATETIME NOT NULL,
    dateUpdated DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,

    PRIMARY KEY (paymentHistoryID)
 );

 CREATE TABLE IF NOT EXISTS BillPaymentNotification
 (
    billPaymentNotificationID BIGINT auto_increment NOT NULL,
    paymentScheduleID BIGINT NOT NULL,
    userID INT NOT NULL,
    notificationType ENUM ('ALERT', 'CONFIRMATION', 'REMINDER') NOT NULL,
    notificationStatus ENUM ('SENT', 'FAILED', 'PENDING') NOT NULL,
    message VARCHAR(255) NOT NULL,
    sent DATETIME NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users (userID),
    PRIMARY KEY (billPaymentNotificationID)
 );

 CREATE TABLE IF NOT EXISTS AccountSecurity
 (
        accountSecurityID BIGINT auto_increment NOT NULL,
        acctID INT NOT NULL,
        isEnabled BOOLEAN DEFAULT TRUE,
        depositLimit INT NOT NULL,
        withdrawLimit INT NOT NULL,
        transferLimit INT NOT NULL,
        transactionVelocityLimit INT NOT NULL,
        isWithdrawEnabled BOOLEAN DEFAULT TRUE,
        isDepositEnabled BOOLEAN DEFAULT TRUE,
        isTransferEnabled BOOLEAN DEFAULT TRUE,
        isPurchaseEnabled BOOLEAN DEFAULT TRUE,
        isAccountLocked BOOLEAN DEFAULT FALSE,
        autoPayEnabled BOOLEAN DEFAULT TRUE,
        minimumBalance DECIMAL(10, 3) NOT NULL DEFAULT 0.00,

        feesEnabled BOOLEAN DEFAULT TRUE,
        interestEnabled BOOLEAN DEFAULT FALSE,

        FOREIGN KEY (acctID) REFERENCES Account(acctID),
        PRIMARY KEY (accountSecurityID)
 );

 CREATE TABLE IF NOT EXISTS Reports
 (
    reportID BIGINT AUTO_INCREMENT NOT NULL,
    userID INT NOT NULL,
    reportName VARCHAR(255) NOT NULL,
    reportType VARCHAR(50) NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users(userID),
    PRIMARY KEY(reportID)
 );

 CREATE TABLE IF NOT EXISTS AccountNotifications
 (
    acctNotificationID BIGINT AUTO_INCREMENT,
    acctID INT NOT NULL,
    title VARCHAR(225) NOT NULL,
    message VARCHAR(225) NOT NULL,
    priority INT NOT NULL,
    isRead BOOLEAN DEFAULT 0,
    isSevere BOOLEAN DEFAULT 0,
    accountNotificationCategory VARCHAR(225) NOT NULL,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    PRIMARY KEY (acctNotificationID)
 );


 CREATE TABLE IF NOT EXISTS Transactions
 (
    transactionID BIGINT PRIMARY KEY auto_increment,
    historyID BIGINT NOT NULL,
    transactionType ENUM ('WITHDRAWAL', 'DEPOSIT', 'TRANSFER', 'PURCHASE') NOT NULL,
    referenceID BIGINT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE', 'FINISHED'),

    FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );

CREATE TABLE IF NOT EXISTS Transactions_Users
(
    acctID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY(acctID, userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(userID) REFERENCES Users(userID)
);

 CREATE TABLE IF NOT EXISTS Purchases
 (
     purchaseID BIGINT PRIMARY KEY auto_increment,
     userID INT NOT NULL,
     acctID INT NOT NULL,
     description VARCHAR(225) NOT NULL,
     amount DECIMAL(10, 2) NOT NULL,
     isDebit BOOL,
     isCredit BOOL,
     status ENUM ('PENDING', 'CANCELED', 'DONE', 'FINISHED'),
     posted datetime,

     FOREIGN KEY (userID) REFERENCES Users (userID),
     FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );



 CREATE TABLE IF NOT EXISTS TransactionCriteria
 (
    transactionCriteriaID BIGINT auto_increment NOT NULL,
    amount DECIMAL(10, 3) NOT NULL,
    description VARCHAR(255) NOT NULL,
    transactionScheduleID BIGINT NOT NULL,
    referenceNumber VARCHAR(255) NOT NULL,
    confirmationNumber INT NOT NULL,
    transactionStatus ENUM ('PENDING', 'COMPLETED', 'CANCELED', 'FAILED'),
    posted datetime NOT NULL,
    transactionType ENUM ('Withdraw', 'Deposit', 'Transfer', 'Purchase') NOT NULL,
    notificationsEnabled BOOLEAN DEFAULT FALSE,


    PRIMARY KEY (transactionCriteriaID)
 );

 CREATE TABLE IF NOT EXISTS TransactionScheduleCriteria
 (
    transactionScheduleID BIGINT AUTO_INCREMENT NOT NULL,
    scheduledDate DATETIME NOT NULL,
    scheduledTime TIME NOT NULL,
    scheduledInterval ENUM ('ONCE', 'DAILY', 'WEEKLY', 'BI_WEEKLY', 'MONTHLY') NOT NULL,
    isScheduledNow BOOLEAN DEFAULT FALSE,
    useDefaultDateSchedule BOOLEAN DEFAULT FALSE,

    PRIMARY KEY (transactionScheduleID)
 );

 CREATE TABLE IF NOT EXISTS Transfer
 (
    transferID BIGINT auto_increment NOT NULL,
    toAccountID INT NOT NULL,
    fromAccountID INT NOT NULL,
    fromUserID INT NOT NULL,
    toUserID INT NOT NULL,
    criteriaID BIGINT NOT NULL,
    transferType ENUM('USER_TO_USER', 'SAME_USER'),

    FOREIGN KEY (toAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (fromAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (fromUserID) REFERENCES Users(userID),
    FOREIGN KEY (toUserID) REFERENCES Users(userID),
    FOREIGN KEY (criteriaID) REFERENCES TransactionCriteria(transactionCriteriaID),

    PRIMARY KEY (transferID)
 );

 CREATE TABLE IF NOT EXISTS Deposit
 (
    depositID INT auto_increment NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    criteriaID BIGINT NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (acctID) REFERENCES Account (acctID),
    FOREIGN KEY (criteriaID) REFERENCES TransactionCriteria(transactionCriteriaID),
    PRIMARY KEY (depositID)
 );

 CREATE TABLE IF NOT EXISTS Withdraw
 (
    withdrawID BIGINT auto_increment NOT NULL,
    userID INT NOT NULL,
    fromAcctID INT NOT NULL,
    criteriaID BIGINT NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (fromAcctID) REFERENCES Account(acctID),
    FOREIGN KEY (criteriaID) REFERENCES TransactionCriteria(transactionCriteriaID),

    PRIMARY KEY (withdrawID)
 );

  CREATE TABLE IF NOT EXISTS Connections
 (
    connectionID BIGINT PRIMARY KEY auto_increment,
    dbServer VARCHAR(225) NOT NULL,
    dbPort INT NOT NULL,
    dbName VARCHAR(225) NOT NULL,
    dbUser VARCHAR(225) NOT NULL,
    dbPass VARCHAR(225) NOT NULL,
    dbURL VARCHAR(225) NOT NULL,
    dbDriver VARCHAR(225) NOT NULL,
    dbType ENUM('MYSQL', 'SSQL', 'PGSQL'),
    dateModified datetime
 );

 CREATE TABLE IF NOT EXISTS UserLog
 (
    id INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    lastLogin datetime,
    lastLogout datetime,
    sessionDuration INT,
    loginSuccess BOOLEAN,
    loginAttempts INT,
    isActive BOOLEAN DEFAULT 0,

    FOREIGN KEY (userID) REFERENCES Users(userID)
 );

 CREATE TABLE IF NOT EXISTS BalanceHistory
 (
     historyID BIGINT PRIMARY KEY AUTO_INCREMENT,
     acctID INT NOT NULL,
     transactionID BIGINT NOT NULL,
     balanceAfter DECIMAL(10, 2) NOT NULL,
     adjusted DECIMAL(10, 2) NOT NULL,
     balanceBefore DECIMAL(10, 2) NOT NULL,
     transactionType ENUM('Deposit', 'Withdraw', 'Purchase', 'Transfer'),
     createdBy VARCHAR(225) NOT NULL,
     createdAt datetime NOT NULL,
     posted datetime NOT NULL,

     FOREIGN KEY(acctID) REFERENCES Account(acctID)
 );

 CREATE TABLE IF NOT EXISTS AccountDetails
 (
    aID BIGINT PRIMARY KEY auto_increment,
    historyID BIGINT NOT NULL,
    acctID INT NOT NULL,
    pending DECIMAL(10, 2) NOT NULL,
    available DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    FOREIGN KEY (historyID) REFERENCES BalanceHistory(historyID)
 );

 CREATE TABLE IF NOT EXISTS Notifications
 (
    notificationID BIGINT auto_increment NOT NULL,
    userID INT NOT NULL,
    message VARCHAR(225) NOT NULL,
    sent datetime NOT NULL,
    hasBeenRead BOOL DEFAULT 0,
    priority INT NOT NULL,
    notificationType VARCHAR(50) NOT NULL,
    transactionID BIGINT,

    PRIMARY KEY (notificationID),
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (transactionID) REFERENCES Transactions (transactionID)
 );

 CREATE TABLE IF NOT EXISTS EmailServer
 (
    id BIGINT auto_increment NOT NULL,
    host VARCHAR(225) NOT NULL,
    port INT NOT NULL,
    username VARCHAR(225) NOT NULL,
    password VARCHAR(225) NOT NULL,
    isTLS BOOL DEFAULT 0,

    PRIMARY KEY (id)
 );

 CREATE TABLE IF NOT EXISTS TriggerCriteria
 (
    triggerCriteriaID INT auto_increment NOT NULL,
    day INT NOT NULL,
    minute INT NOT NULL,
    hour INT NOT NULL,
    second INT NOT NULL,
    month INT NOT NULL,
    year INT NOT NULL,
    scheduleType ENUM('DAILY', 'WEEKLY', 'ONCE', 'MONTHLY'),
    frequency INT NOT NULL,

    PRIMARY KEY (triggerCriteriaID)
 );

 CREATE TABLE IF NOT EXISTS TransactionDetail
 (
        transactionDetailID BIGINT AUTO_INCREMENT NOT NULL,
        userID INT NOT NULL,
        acctID INT NOT NULL,
        relatedAcctID INT,
        depositID INT,
        withdrawID BIGINT,
        transferID BIGINT,
        purchaseID BIGINT,
        balance DECIMAL(10, 2) NOT NULL,
        createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        debit DECIMAL(10, 2),
        credit DECIMAL(10, 2),
        type VARCHAR(50),
        status VARCHAR(50),
        method VARCHAR(50),
        payee VARCHAR(255),
        description TEXT,
        referenceNumber VARCHAR(50),
        confirmationNumber INT NOT NULL,
        fee DECIMAL(10, 2),

        FOREIGN KEY(userID) REFERENCES Users(userID),
        FOREIGN KEY(acctID) REFERENCES Account(acctID),
        FOREIGN KEY(relatedAcctID) REFERENCES Account(acctID),
        FOREIGN KEY(depositID) REFERENCES Deposit(depositID),
        FOREIGN KEY(withdrawID) REFERENCES Withdraw(withdrawID),
        FOREIGN KEY(transferID) REFERENCES Transfer(transferID),
        FOREIGN KEY(purchaseID) REFERENCES Purchases(purchaseID),

        PRIMARY KEY(transactionDetailID)
 );

 CREATE TABLE IF NOT EXISTS TransactionStatement
 (
    statementID BIGINT AUTO_INCREMENT NOT NULL,
    acctID INT NOT NULL,
    description VARCHAR(225) NOT NULL,
    debit VARCHAR(35),
    credit VARCHAR(35),
    balance VARCHAR(35) NOT NULL,
    posted DATETIME NOT NULL,
    transactionDate VARCHAR(35),
    isPending BOOLEAN DEFAULT FALSE,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    PRIMARY KEY (statementID)
 );

 CREATE TABLE IF NOT EXISTS AccountProperties
 (
    accountPropsID BIGINT AUTO_INCREMENT NOT NULL,
    acctID INT NOT NULL,
    acct_color VARCHAR(255),
    image_url VARCHAR(255) NOT NULL,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    PRIMARY KEY(accountPropsID)
 );

CREATE TABLE SPRING_SESSION (
    PRIMARY_ID CHAR(36) NOT NULL,
    SESSION_ID CHAR(36) NOT NULL,
    CREATION_TIME BIGINT NOT NULL,
    LAST_ACCESS_TIME BIGINT NOT NULL,
    MAX_INACTIVE_INTERVAL INT NOT NULL,
    EXPIRY_TIME BIGINT NOT NULL,
    PRINCIPAL_NAME VARCHAR(100),
    PRIMARY KEY (PRIMARY_ID),
    UNIQUE (SESSION_ID)
);

CREATE INDEX SPRING_SESSION_IX1 ON SPRING_SESSION (EXPIRY_TIME);
CREATE INDEX SPRING_SESSION_IX2 ON SPRING_SESSION (PRINCIPAL_NAME);

CREATE TABLE SPRING_SESSION_ATTRIBUTES (
    SESSION_PRIMARY_ID CHAR(36) NOT NULL,
    ATTRIBUTE_NAME VARCHAR(200) NOT NULL,
    ATTRIBUTE_BYTES BLOB NOT NULL,
    PRIMARY KEY (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),
    FOREIGN KEY (SESSION_PRIMARY_ID) REFERENCES SPRING_SESSION(PRIMARY_ID) ON DELETE CASCADE
);


ALTER TABLE Account ADD CONSTRAINT fk_Account_AccountCode FOREIGN KEY (accountCodeID) REFERENCES AccountCode(acctCodeID);
ALTER TABLE Account ADD CONSTRAINT fk_Account_AccountProperties FOREIGN KEY (accountPropsID) REFERENCES AccountProperties(accountPropsID);
ALTER TABLE SchedulerCriteria ADD CONSTRAINT fk_SchedulerCriteria_TransactionScheduleCriteria FOREIGN KEY (transactionScheduleID) REFERENCES TransactionScheduleCriteria(transactionScheduleID);
ALTER TABLE BillPayment ADD CONSTRAINT fk_BillPayment_BillPaymentSchedule FOREIGN KEY (paymentScheduleID) REFERENCES BillPaymentSchedule(paymentScheduleID);
ALTER TABLE BillPaymentSchedule ADD CONSTRAINT fk_BillPaymentSchedule_BillPaymentHistory FOREIGN KEY (paymentHistoryID) REFERENCES BillPaymentHistory(paymentHistoryID);
ALTER TABLE TransactionCriteria ADD CONSTRAINT fk_TransactionCriteria_TransactionScheduleCriteria FOREIGN KEY (transactionScheduleID) REFERENCES TransactionScheduleCriteria(transactionScheduleID);

