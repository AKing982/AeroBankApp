
CREATE TABLE registration
(
    id INT PRIMARY KEY auto_increment NOT NULL,
    firstName VARCHAR(225) NOT NULL,
    lastName VARCHAR(225) NOT NULL,
    username VARCHAR(225) NOT NULL,
    email VARCHAR(225) NOT NULL,
    address VARCHAR(225) NOT NULL,
    zipcode VARCHAR(9) NOT NULL,
    pinNumber VARCHAR(8) NOT NULL,
    password VARCHAR(50) NOT NULL,
    deposit DECIMAL(10,2) NOT NULL
 );

 CREATE TABLE IF NOT EXISTS Users
  (
     userID INT PRIMARY KEY auto_increment,
     userName VARCHAR(225) NOT NULL,
     firstName VARCHAR(225) NOT NULL,
     lastName VARCHAR(225) NOT NULL,
     email VARCHAR(225) NOT NULL,
     password VARCHAR(225) NOT NULL,
     pinNumber CHAR(6) NOT NULL,
     accountNumber VARCHAR(225) NOT NULL,
     role VARCHAR(225) NOT NULL,
     isAdmin BOOL,
     isEnabled BOOL
  );

   CREATE TABLE IF NOT EXISTS Account
   (
      acctID INT AUTO_INCREMENT NOT NULL,
      accountCodeID BIGINT NOT NULL,
      userID INT NOT NULL,
      aSecID INT NOT NULL,
      accountName VARCHAR(225) NOT NULL,
      balance DECIMAL(10, 3) NOT NULL,
      interest DECIMAL(10, 3) NOT NULL,
      accountType VARCHAR(225) NOT NULL,
      hasDividend BOOL,
      isRentAccount BOOL,
      hasMortgage BOOL,
      acct_color VARCHAR(225) NOT NULL,

      FOREIGN KEY (userID) REFERENCES Users(userID),
      FOREIGN KEY (accountCodeID) REFERENCES AccountCode(acctCodeID),

      PRIMARY KEY(acctID)
  );

  CREATE TABLE IF NOT EXISTS AccountCode
  (
    acctCodeID BIGINT AUTO_INCREMENT NOT NULL,
    first_initial_segment VARCHAR(1) NOT NULL,
    last_initial_segment VARCHAR(1) NOT NULL,
    userID INT NOT NULL,
    accountType VARCHAR(4) NOT NULL,
    year_segment INT NOT NULL,
    account_segment INT NOT NULL,

    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (account_segment) REFERENCES Account(acctID),
    PRIMARY KEY(acctCodeID)
  );

  CREATE TABLE IF NOT EXISTS Account_Users
   (
      acctID INT NOT NULL,
      userID INT NOT NULL,
      PRIMARY KEY(acctID, userID),
      FOREIGN KEY(acctID) REFERENCES Account(acctID),
      FOREIGN KEY(userID) REFERENCES Users(userID)
   );

  CREATE TABLE IF NOT EXISTS SchedulerCriteria
   (
      scheduleCriteriaID BIGINT PRIMARY KEY auto_increment,
      schedulerUserID INT NOT NULL,
      scheduledTime datetime NOT NULL,
      scheduledDate datetime NOT NULL,
      scheduleType ENUM('ONCE', 'DAILY', 'MONTHLY', 'WEEKLY', 'BI-DAILY', 'BI-WEEKLY'),
      status ENUM('ACTIVE', 'PAUSED', 'COMPLETED'),
      priority INT NOT NULL,
      lastRunTime datetime,
      nextRunTime datetime,

      FOREIGN KEY (schedulerUserID) REFERENCES Users(userID)
   );

 CREATE TABLE IF NOT EXISTS PaymentSchedule
 (
    paymentID BIGINT auto_increment NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    payeeName VARCHAR(225) NOT NULL,
    payeeAccountCode VARCHAR(2) NOT NULL,
    paymentAmount DECIMAL(10, 2) NOT NULL,
    paymentDescription VARCHAR(225) NOT NULL,
    paymentMethod VARCHAR(50) NOT NULL,
    currencyCode VARCHAR(3) NOT NULL,
    customerReference VARCHAR(225) NOT NULL,
    paymentType VARCHAR(225) NOT NULL,
    postedDate datetime NOT NULL,
    paymentDueDate datetime NOT NULL,
    isRecurring BOOLEAN DEFAULT FALSE,
    isDeleted BOOLEAN DEFAULT FALSE,

    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (acctID) REFERENCES Account (acctID),
    PRIMARY KEY(paymentID)
 );

 CREATE TABLE IF NOT EXISTS AccountSecurity
 (
        accountSecurityID BIGINT auto_increment NOT NULL,
        acctID INT NOT NULL,
        isEnabled BOOLEAN DEFAULT TRUE,
        depositLimit INT NOT NULL,
        withdrawLimit INT NOT NULL,
        transferLimit INT NOT NULL,
        transactionVelocityLimit INT NOT NULL,
        isWithdrawEnabled BOOLEAN DEFAULT TRUE,
        isDepositEnabled BOOLEAN DEFAULT TRUE,
        isTransferEnabled BOOLEAN DEFAULT TRUE,
        isPurchaseEnabled BOOLEAN DEFAULT TRUE,
        isAccountLocked BOOLEAN DEFAULT FALSE,
        autoPayEnabled BOOLEAN DEFAULT TRUE,
        minimumBalance DECIMAL(10, 3) NOT NULL DEFAULT 0.00,

        feesEnabled BOOLEAN DEFAULT TRUE,
        interestEnabled BOOLEAN DEFAULT FALSE,

        FOREIGN KEY (acctID) REFERENCES Account(acctID),
        PRIMARY KEY (accountSecurityID)
 );

 CREATE TABLE IF NOT EXISTS AccountNotifications
 (
    acctNotificationID BIGINT AUTO_INCREMENT,
    acctID INT NOT NULL,
    title VARCHAR(225) NOT NULL,
    message VARCHAR(225) NOT NULL,
    priority INT NOT NULL,
    isRead BOOLEAN DEFAULT 0,
    isSevere BOOLEAN DEFAULT 0,
    accountNotificationCategory VARCHAR(225) NOT NULL,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    PRIMARY KEY (acctNotificationID)
 );

 CREATE TABLE IF NOT EXISTS PendingTransactions
 (
    pendingID BIGINT PRIMARY KEY auto_increment NOT NULL,
    referenceID BIGINT NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    description VARCHAR(225) NOT NULL,
    pendingAmount DECIMAL(10, 2) NOT NULL,
    initiatedAt datetime DEFAULT CURRENT_TIMESTAMP,
    status_change datetime,
    status ENUM('PENDING', 'APPROVED', 'PROCESSING', 'REJECTED'),

    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );


 CREATE TABLE IF NOT EXISTS Transactions
 (
    transactionID BIGINT PRIMARY KEY auto_increment,
    historyID BIGINT NOT NULL,
    transactionType ENUM ('WITHDRAWAL', 'DEPOSIT', 'TRANSFER', 'PURCHASE') NOT NULL,
    referenceID BIGINT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE', 'FINISHED'),

    FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );

CREATE TABLE IF NOT EXISTS Transactions_Users
(
    acctID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY(acctID, userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(userID) REFERENCES Users(userID)
);

 CREATE TABLE IF NOT EXISTS Purchases
 (
     purchaseID BIGINT PRIMARY KEY auto_increment,
     userID INT NOT NULL,
     acctID INT NOT NULL,
     description VARCHAR(225) NOT NULL,
     amount DECIMAL(10, 2) NOT NULL,
     isDebit BOOL,
     isCredit BOOL,
     status ENUM ('PENDING', 'CANCELED', 'DONE', 'FINISHED'),
     posted datetime,

     FOREIGN KEY (userID) REFERENCES Users (userID),
     FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );

 CREATE TABLE IF NOT EXISTS Withdrawals
 (
    withdrawID BIGINT PRIMARY KEY auto_increment,
    userID INT NOT NULL,
    fromAcctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    scheduledDate DATETIME NOT NULL,
    scheduledTime DATETIME NOT NULL,
    scheduledInterval ENUM('DAILY', 'ONCE'),
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE'),

    FOREIGN KEY(fromAcctID) REFERENCES Account(acctID),
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (withdrawID) REFERENCES Transactions(transactionID)
 );

CREATE TABLE IF NOT EXISTS Transfers
 (
    transferID BIGINT PRIMARY KEY auto_increment,
    toAccountID INT NOT NULL,
    fromAccountID INT NOT NULL,
    fromUserID INT NOT NULL,
    toUserID INT NOT NULL,
    toAccountCode VARCHAR(2),
    toAccountNumber VARCHAR(225),
    transferAmount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    transferDate datetime NOT NULL,
    transferTime TIME NOT NULL,
    isPending BOOLEAN DEFAULT 0,
    date_posted datetime,
    transferType VARCHAR(225) NOT NULL,
    notificationEnabled BOOLEAN DEFAULT 0,
    status ENUM('PENDING', 'CANCELED', 'FINISHED'),

    FOREIGN KEY (toAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (fromAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (fromUserID) REFERENCES Users(userID),
    FOREIGN KEY (toUserID) REFERENCES Users(userID)
 );

  CREATE TABLE IF NOT EXISTS Deposits
  (
     depositID BIGINT PRIMARY KEY auto_increment,
     userID INT NOT NULL,
     acctID INT NOT NULL,
     amount DECIMAL(10, 2) NOT NULL,
     description VARCHAR(225) NOT NULL,
     posted datetime,
     scheduledDate datetime,
     scheduledTime time,
     scheduledInterval VARCHAR(225) NOT NULL,
     status ENUM('PENDING', 'CANCELED', 'DONE'),

     FOREIGN KEY(userID) REFERENCES Users(userID),
     FOREIGN KEY(acctID) REFERENCES Account(acctID)
  );

 CREATE TABLE IF NOT EXISTS DepositQueue
 (
        queueID INT auto_increment NOT NULL,
        depositID BIGINT NOT NULL,
        queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

        FOREIGN KEY(depositID) REFERENCES Deposits(depositID),
        PRIMARY KEY(queueID)
 );

 CREATE TABLE IF NOT EXISTS WithdrawQueue
 (
    queueID INT auto_increment NOT NULL,
    withdrawID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

    FOREIGN KEY(withdrawID) REFERENCES Withdrawals(withdrawID),
    PRIMARY KEY(queueID)
 );

 CREATE TABLE IF NOT EXISTS TransferQueue
 (
    tQueueID INT AUTO_INCREMENT NOT NULL,
    transferID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

    FOREIGN KEY(transferID) REFERENCES Transfers(transferID),
    PRIMARY KEY(tQueueID)
 );


 CREATE TABLE IF NOT EXISTS PurchaseQueue
 (
    pQueueID INT AUTO_INCREMENT NOT NULL,
    purchaseID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

    FOREIGN KEY(purchaseID) REFERENCES Purchases(purchaseID),
    PRIMARY KEY(pQueueID)

 );

 CREATE TABLE IF NOT EXISTS Connections
 (
    connectionID BIGINT PRIMARY KEY auto_increment,
    dbServer VARCHAR(225) NOT NULL,
    dbPort INT NOT NULL,
    dbName VARCHAR(225) NOT NULL,
    dbUser VARCHAR(225) NOT NULL,
    dbPass VARCHAR(225) NOT NULL,
    dbURL VARCHAR(225) NOT NULL,
    dbDriver VARCHAR(225) NOT NULL,
    dbType ENUM('MYSQL', 'SSQL', 'PGSQL'),
    dateModified datetime
 );

 CREATE TABLE IF NOT EXISTS CheckingAccount
 (
    id int primary key auto_increment,
    accountCode VARCHAR(2) NOT NULL,
    userID INT NOT NULL,
    accountName VARCHAR(225) NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    interest_rate DECIMAL(10, 2) NOT NULL,
    minimum_balance DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY(userID) REFERENCES users(userID)
 );

 CREATE TABLE IF NOT EXISTS UserLog
 (
    id INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    lastLogin datetime,
    lastLogout datetime,
    sessionDuration INT,
    loginSuccess BOOLEAN,
    loginAttempts INT,
    isActive BOOLEAN DEFAULT 0,

    FOREIGN KEY (userID) REFERENCES Users(userID)
 );

 CREATE TABLE IF NOT EXISTS BalanceHistory
 (
     historyID BIGINT PRIMARY KEY AUTO_INCREMENT,
     acctID INT NOT NULL,
     transactionID BIGINT NOT NULL,
     balanceAfter DECIMAL(10, 2) NOT NULL,
     adjusted DECIMAL(10, 2) NOT NULL,
     balanceBefore DECIMAL(10, 2) NOT NULL,
     transactionType ENUM('Deposit', 'Withdraw', 'Purchase', 'Transfer'),
     createdBy VARCHAR(225) NOT NULL,
     createdAt datetime NOT NULL,
     posted datetime NOT NULL,

     FOREIGN KEY(acctID) REFERENCES Account(acctID)
 );

 CREATE TABLE IF NOT EXISTS AccountDetails
 (
    aID BIGINT PRIMARY KEY auto_increment,
    historyID BIGINT NOT NULL,
    acctID INT NOT NULL,
    pending DECIMAL(10, 2) NOT NULL,
    available DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    FOREIGN KEY (historyID) REFERENCES BalanceHistory(historyID)
 );

 CREATE TABLE IF NOT EXISTS Notifications
 (
    notificationID BIGINT auto_increment NOT NULL,
    userID INT NOT NULL,
    message VARCHAR(225) NOT NULL,
    sent datetime NOT NULL,
    hasBeenRead BOOL DEFAULT 0,
    priority INT NOT NULL,
    notificationType VARCHAR(50) NOT NULL,
    transactionID BIGINT,

    PRIMARY KEY (notificationID),
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (transactionID) REFERENCES Transactions (transactionID)
 );

 CREATE TABLE IF NOT EXISTS EmailServer
 (
    id BIGINT auto_increment NOT NULL,
    host VARCHAR(225) NOT NULL,
    port INT NOT NULL,
    username VARCHAR(225) NOT NULL,
    password VARCHAR(225) NOT NULL,
    isTLS BOOL DEFAULT 0,

    PRIMARY KEY (id)
 );

 CREATE TABLE IF NOT EXISTS TriggerCriteria
 (
    triggerCriteriaID INT auto_increment NOT NULL,
    day INT NOT NULL,
    minute INT NOT NULL,
    hour INT NOT NULL,
    second INT NOT NULL,
    month INT NOT NULL,
    year INT NOT NULL,
    scheduleType ENUM('DAILY', 'WEEKLY', 'ONCE', 'MONTHLY'),
    frequency INT NOT NULL,

    PRIMARY KEY (triggerCriteriaID)
 );

 CREATE TABLE IF NOT EXISTS TransactionDetails
 (
    transactionDetailID BIGINT AUTO_INCREMENT NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    relatedAcctID INT,
    depositID BIGINT,
    withdrawID BIGINT,
    transferID BIGINT,
    purchaseID BIGINT,
    balance DECIMAL(10, 2) NOT NULL,
    newBalance DECIMAL(10, 2) NOT NULL,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY(userID) REFERENCES Users(userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(relatedAcctID) REFERENCES Account(acctID),
    FOREIGN KEY(depositID) REFERENCES Deposits(depositID),
    FOREIGN KEY(withdrawID) REFERENCES Withdrawals(withdrawID),
    FOREIGN KEY(transferID) REFERENCES Transfers(transferID),
    FOREIGN KEY(purchaseID) REFERENCES Purchases(purchaseID),

    PRIMARY KEY(transactionDetailID)
 );

 CREATE TABLE IF NOT EXISTS TransactionStatement
 (
    statementID BIGINT AUTO_INCREMENT NOT NULL,
    acctID INT NOT NULL,
    description VARCHAR(225) NOT NULL,
    debit VARCHAR(35),
    credit VARCHAR(35),
    balance VARCHAR(35) NOT NULL,
    posted DATETIME NOT NULL,
    transactionDate VARCHAR(35),
    isPending BOOLEAN DEFAULT FALSE,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    PRIMARY KEY (statementID)
 );

 CREATE TABLE IF NOT EXISTS AccountProperties
 (
    accountPropsID BIGINT AUTO_INCREMENT NOT NULL,
    acctID INT NOT NULL,
    acct_color VARCHAR(255) NOT NULL,
    image_name VARCHAR(255) NOT NULL,
    image_url VARCHAR(255) NOT NULL,

    FOREIGN KEY (acctID) REFERENCES Account(acctID),
    PRIMARY KEY(accountPropsID)
 );


INSERT INTO Users (userID, userName, firstName, lastName, email, password, pinNumber, accountNumber, role, isAdmin, isEnabled) VALUES
    (1, 'AKing94','Alex','King','alex@utahkings.com', '$2a$10$aqfzLM6TU/NLb.BiwV9LJuNg96YYTm1jZzd8bWhzdfcwaUzh.o922', '5988', '89-42-48', 'ADMIN', 1, 1);

INSERT INTO Users (userID, userName, firstName, lastName, email, password, pinNumber, accountNumber, role, isAdmin, isEnabled) VALUES
    (2, 'BSmith23', 'Bob', 'Smith','bsmith@outlook.com', '$2a$10$qViLMZ8GepHO7JJyT5tom.Rf/hl4XO.XkxPME6NwiIrLr7avAK0Si', '2222', '35-09-24', 'USER', 0, 1);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage, acct_color)
VALUES (1, 'A1', 1, 0, 'Alex Checking', '1215.000', '0.00', 'CHECKING', false, false, false);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage, acct_color)
VALUES (2, 'A2', 1, 0, 'Alex Savings', '3400.000', '0.00', 'SAVINGS', false, false, false);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage, acct_color)
VALUES (3, 'A3', 1, 0, 'Alex Rent', '1628.000', '0.00', 'RENT', false, false, false);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage, acct_color)
VALUES (4, 'B1', 2, 0, 'Bob Checking', '1212.000', '0.00', 'CHECKING', false, false, false);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage, acct_color)
VALUES (5, 'B2', 2, 0, 'Bob Savings', '4500.000', '0.00', 'SAVINGS', false, false, false);

INSERT INTO Account_Users (acctID, userID) VALUES (1, 1);
INSERT INTO Account_Users (acctID, userID) VALUES (2, 1);
INSERT INTO Account_Users (acctID, userID) VALUES (3, 1);

INSERT INTO Account_Users (acctID, userID) VALUES (4, 2);
INSERT INTO Account_Users (acctID, userID) VALUES (5, 2);

INSERT INTO AccountProperties (accountPropsID, acctID, acct_color, image_name, image_url) VALUES (1, 1, 'RED', 'mountain', '/images/pexels-pixabay-417173.jpg');
INSERT INTO AccountProperties (accountPropsID, acctID, acct_color, image_name, image_url) VALUES (2, 2, 'PURPLE', 'valley mountain', '/images/pexels-archie-binamira-672451.jpg');
INSERT INTO AccountProperties (accountPropsID, acctID, acct_color, image_name, image_url) VALUES (3, 3, 'TEAL', 'mountain lake', '/images/pexels-james-wheeler-417074.jpg');
INSERT INTO AccountProperties (accountPropsID, acctID, acct_color, image_name, image_url) VALUES (4, 4, 'BLUE', 'sea of clouds', '/images/pexels-krivec-ales-547115.jpg');

