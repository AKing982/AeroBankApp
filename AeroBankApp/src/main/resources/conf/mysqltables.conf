CREATE DATABASE AeroBankApp;

CREATE TABLE registration (
    id INT PRIMARY KEY auto_increment NOT NULL,
    firstName VARCHAR(225) NOT NULL,
    lastName VARCHAR(225) NOT NULL,
    username VARCHAR(225) NOT NULL,
    email VARCHAR(225) NOT NULL,
    address VARCHAR(225) NOT NULL,
    zipcode VARCHAR(9) NOT NULL,
    pinNumber VARCHAR(8) NOT NULL,
    password VARCHAR(50) NOT NULL,
    deposit DECIMAL(10,2) NOT NULL
 );

 CREATE TABLE Account_Users
 (
    account_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    PRIMARY KEY(accountID, userID),
    FOREIGN KEY(accountID) REFERENCES Account(id),
    FOREIGN KEY(user_id) REFERENCES Users(id)
 );


 CREATE TABLE Transactions(
    transactionID BIGINT PRIMARY KEY auto_increment,
    transactionType ENUM ('WITHDRAWAL', 'DEPOSIT', 'TRANSFER', 'PURCHASE') NOT NULL,
    referenceID BIGINT NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    debit DECIMAL(10, 2),
    credit DECIMAL(10, 2),
    description VARCHAR(225) NOT NULL,
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE', 'FINISHED'),

    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );

CREATE TABLE Transactions_Users(
    acctID BIGINT NOT NULL,
    userID BIGINT NOT NULL,
    PRIMARY KEY(acctID, userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(userID) REFERENCES Users(userID);
);

 CREATE TABLE Purchases(
     purchaseID BIGINT PRIMARY KEY auto_increment,
     userID INT NOT NULL,
     acctID INT NOT NULL,
     description VARCHAR(225) NOT NULL,
     amount DECIMAL(10, 2) NOT NULL,
     isDebit BOOL,
     isCredit BOOL,
     status ENUM ('PENDING', 'CANCELED', 'DONE', 'FINISHED'),
     posted datetime,

     FOREIGN KEY (userID) REFERENCES Users (userID),
     FOREIGN KEY (acctID) REFERENCES Account(acctID)
 )

 CREATE TABLE Withdrawals (
    withdrawID BIGINT PRIMARY KEY auto_increment,
    userID INT NOT NULL,
    fromAcctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE'),

    FOREIGN KEY(fromAcctID) REFERENCES Account(acctID),
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (withdrawID) REFERENCES Transactions(transactionID)
 );

 CREATE TABLE SchedulerCriteria (
    scheduleCriteriaID BIGINT PRIMARY KEY auto_increment,
    schedulerUserID BIGINT NOT NULL,
    scheduledTime datetime NOT NULL,
    scheduledDate datetime NOT NULL,
    scheduleType ENUM('ONCE', 'DAILY', 'MONTHLY', 'WEEKLY', 'BI-DAILY', 'BI-WEEKLY'),
    status ENUM('ACTIVE', 'PAUSED', 'COMPLETED')
    priority INT NOT NULL,
    lastRunTime datetime,
    nextRunTime datetime,

    FOREIGN KEY (schedulerUserID) REFERENCES Users(userID);
 )

 CREATE TABLE Deposits (
    depositID BIGINT PRIMARY KEY auto_increment,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE'),

    FOREIGN KEY(userID) REFERENCES Users(userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(depositID) REFERENCES Transactions(transactionID)
 );

 CREATE TABLE Transfers(

    transferID BIGINT PRIMARY KEY auto_increment,
    toAccountID INT NOT NULL,
    fromAccountID INT NOT NULL,
    toAccountCode VARCHAR(225) NOT NULL,
    fromAccountCode VARCHAR(225) NOT NULL,
    transferAmount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    origin_userID INT NOT NULL,
    destination_userID INT NOT NULL,
    date_posted datetime,
    status ENUM('PENDING', 'CANCELED', 'FINISHED'),

    FOREIGN KEY (toAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (fromAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (origin_userID) REFERENCES Users(userID),
    FOREIGN KEY (destination_userID) REFERENCES Users(userID),
    FOREIGN KEY (transferID) REFERENCES Transactions(transactionID)

 );

 CREATE TABLE Users
 (
    userID INT PRIMARY KEY auto_increment,
    userName VARCHAR(225) NOT NULL,
    email VARCHAR(225) NOT NULL,
    password VARCHAR(225) NOT NULL,
    pinNumber CHAR(6) NOT NULL,
    accountNumber VARCHAR(225) NOT NULL,
    isAdmin BOOL,
    isEnabled BOOL
 );

 CREATE TABLE CheckingAccount
 (
    id int primary key auto_increment,
    accountCode VARCHAR(2) NOT NULL,
    userID INT NOT NULL,
    accountName VARCHAR(225) NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    interest_rate DECIMAL(10, 2) NOT NULL,
    minimum_balance DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY(userID) REFERENCES users(userID)
 );

 CREATE TABLE IF NOT EXISTS UserLog
 (
    id INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    lastLogin DATE,

    FOREIGN KEY(userID) REFERENCES users(userID)
 );

 CREATE TABLE Profile
 (

 )

 CREATE TABLE Account(
    acctID PRIMARY KEY auto_increment INT NOT NULL,
    accountCode VARCHAR(225) NOT NULL,
    userID INT NOT NULL,
    aSecID INT NOT NULL,
    accountName VARCHAR(225) NOT NULL,
    balance DECIMAL(10, 3) NOT NULL,
    interest DECIMAL(10, 3) NOT NULL,
    accountType VARCHAR(225) NOT NULL,
    hasDividend BOOL,
    isRentAccount BOOL,
    hasMortgage BOOL,

    FOREIGN KEY (userID) REFERENCES Users(id)
);


 CREATE TABLE IF NOT EXISTS BalanceHistory
 (
     historyID INT PRIMARY KEY AUTO_INCREMENT,
     accountID INT NOT NULL,
     transactionID BIGINT NOT NULL,
     balance DECIMAL(10, 2) NOT NULL,
     adjustedBalance DECIMAL(10, 2) NOT NULL,
     lastBalance DECIMAL(10, 2) NOT NULL,
     transactionType ENUM('Deposit', 'Withdraw', 'Purchase', 'Transfer'),
     createdBy VARCHAR(225) NOT NULL,
     createdAt datetime NOT NULL,
     updatedBy VARCHAR(225) NOT NULL,
     posted datetime NOT NULL,

     FOREIGN KEY(accountID) REFERENCES Account(accountID),
     FOREIGN KEY(transactionID) REFERENCES Transactions(transactionID)
 );

 CREATE TABLE AccountDetails (
    aID INT PRIMARY KEY auto_increment,
    historyID INT NOT NULL,
    accountID INT NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    pending_balance DECIMAL(10, 2) NOT NULL,
    available_balance DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY (accountID) REFERENCES Account(acctID),
    FOREIGN KEY (historyID) REFERENCES BalanceHistory(historyID)
 )

