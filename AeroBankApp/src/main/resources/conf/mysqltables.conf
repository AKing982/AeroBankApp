CREATE DATABASE AeroBankApp;

CREATE TABLE registration (
    id INT PRIMARY KEY auto_increment NOT NULL,
    firstName VARCHAR(225) NOT NULL,
    lastName VARCHAR(225) NOT NULL,
    username VARCHAR(225) NOT NULL,
    email VARCHAR(225) NOT NULL,
    address VARCHAR(225) NOT NULL,
    zipcode VARCHAR(9) NOT NULL,
    pinNumber VARCHAR(8) NOT NULL,
    password VARCHAR(50) NOT NULL,
    deposit DECIMAL(10,2) NOT NULL
 );

 CREATE TABLE PaymentSchedule (
    paymentID BIGINT auto_increment NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    payeeName VARCHAR(225) NOT NULL,
    payeeAccountCode VARCHAR(2) NOT NULL,
    paymentAmount DECIMAL(10, 2) NOT NULL,
    paymentDescription VARCHAR(225) NOT NULL,
    paymentMethod VARCHAR(50) NOT NULL,
    currencyCode VARCHAR(3) NOT NULL,
    customerReference VARCHAR(225) NOT NULL,
    paymentType VARCHAR(225) NOT NULL,
    postedDate datetime NOT NULL,
    paymentDueDate datetime NOT NULL,
    isRecurring BOOLEAN DEFAULT FALSE,
    isDeleted BOOLEAN DEFAULT FALSE,

    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (acctID) REFERENCES Account (acctID),
    PRIMARY KEY(paymentID)
 );

 CREATE TABLE IF NOT EXISTS AccountSecurity(
        aSecID BIGINT auto_increment NOT NULL,
        acctID INT NOT NULL,
        isEnabled BOOLEAN DEFAULT TRUE,
        withdrawLimit INT NOT NULL,
        transferLimit INT NOT NULL,
        feesEnabled BOOLEAN DEFAULT TRUE,

        FOREIGN KEY (acctID) REFERENCES Account(acctID),
        PRIMARY KEY (aSecID)
 )

 CREATE TABLE Account_Users
 (
    acctID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY(acctID, userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(userID) REFERENCES Users(userID)
 );

 CREATE TABLE IF NOT EXISTS PendingTransactions(
    pendingID BIGINT PRIMARY KEY auto_increment NOT NULL,
    referenceID BIGINT NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    description VARCHAR(225) NOT NULL,
    pendingAmount DECIMAL(10, 2) NOT NULL,
    initiatedAt datetime DEFAULT CURRENT_TIMESTAMP,
    status_change datetime,
    status ENUM('PENDING', 'APPROVED', 'PROCESSING', 'REJECTED'),

    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );


 CREATE TABLE IF NOT EXISTS Transactions(
    transactionID BIGINT PRIMARY KEY auto_increment,
    transactionType ENUM ('WITHDRAWAL', 'DEPOSIT', 'TRANSFER', 'PURCHASE') NOT NULL,
    referenceID BIGINT NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    debit DECIMAL(10, 2),
    credit DECIMAL(10, 2),
    description VARCHAR(225) NOT NULL,
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE', 'FINISHED'),

    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );

CREATE TABLE Transactions_Users(
    acctID BIGINT NOT NULL,
    userID BIGINT NOT NULL,
    PRIMARY KEY(acctID, userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(userID) REFERENCES Users(userID);
);

 CREATE TABLE IF NOT EXISTS Purchases(
     purchaseID BIGINT PRIMARY KEY auto_increment,
     userID INT NOT NULL,
     acctID INT NOT NULL,
     description VARCHAR(225) NOT NULL,
     amount DECIMAL(10, 2) NOT NULL,
     isDebit BOOL,
     isCredit BOOL,
     status ENUM ('PENDING', 'CANCELED', 'DONE', 'FINISHED'),
     posted datetime,

     FOREIGN KEY (userID) REFERENCES Users (userID),
     FOREIGN KEY (acctID) REFERENCES Account(acctID)
 );

 CREATE TABLE IF NOT EXISTS Withdrawals
 (
    withdrawID BIGINT PRIMARY KEY auto_increment,
    userID INT NOT NULL,
    fromAcctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted datetime,
    status ENUM('PENDING', 'CANCELED', 'DONE'),

    FOREIGN KEY(fromAcctID) REFERENCES Account(acctID),
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (withdrawID) REFERENCES Transactions(transactionID)
 );

 CREATE TABLE IF NOT EXISTS SchedulerCriteria
 (
    scheduleCriteriaID BIGINT PRIMARY KEY auto_increment,
    schedulerUserID BIGINT NOT NULL,
    scheduledTime datetime NOT NULL,
    scheduledDate datetime NOT NULL,
    scheduleType ENUM('ONCE', 'DAILY', 'MONTHLY', 'WEEKLY', 'BI-DAILY', 'BI-WEEKLY'),
    status ENUM('ACTIVE', 'PAUSED', 'COMPLETED')
    priority INT NOT NULL,
    lastRunTime datetime,
    nextRunTime datetime,

    FOREIGN KEY (schedulerUserID) REFERENCES Users(userID);
 );

 CREATE TABLE DepositQueue IF NOT EXISTS (
        queueID INT auto_increment NOT NULL,
        depositID BIGINT NOT NULL,
        queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

        FOREIGN KEY(depositID) REFERENCES Deposits(depositID),
        PRIMARY KEY(queueID)
 );

 CREATE TABLE WithdrawQueue IF NOT EXISTS (
    queueID INT auto_increment NOT NULL,
    withdrawID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

    FOREIGN KEY(withdrawID) REFERENCES Withdrawals(withdrawID),
    PRIMARY KEY(queueID)
 );

 CREATE TABLE TransferQueue IF NOT EXISTS(
    tQueueID INT AUTO_INCREMENT NOT NULL,
    transferID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

    FOREIGN KEY(transferID) REFERENCES Transfer(transferID),
    PRIMARY KEY(tQueueID)
 );


 CREATE TABLE PurchaseQueue IF NOT EXISTS (
    pQueueID INT AUTO_INCREMENT NOT NULL,
    purchaseID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status ENUM('PENDING', 'PROCESSING', 'COMPLETED', 'FAILED') NOT NULL,

    FOREIGN KEY(purchaseID) REFERENCES Purchase(purchaseID),
    PRIMARY KEY(pQueueID)

 );

 CREATE TABLE IF NOT EXISTS Deposits
 (
    depositID BIGINT PRIMARY KEY auto_increment,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted datetime,
    scheduledDate datetime,
    scheduledTime time,
    scheduledInterval VARCHAR(225) NOT NULL,
    status ENUM('PENDING', 'CANCELED', 'DONE'),

    FOREIGN KEY(userID) REFERENCES Users(userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID)
 );

 CREATE TABLE IF NOT EXISTS Transfers
 (

    transferID BIGINT PRIMARY KEY auto_increment,
    toAccountID INT NOT NULL,
    fromAccountID INT NOT NULL,
    toAccountCode VARCHAR(225) NOT NULL,
    fromAccountCode VARCHAR(225) NOT NULL,
    transferAmount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    origin_userID INT NOT NULL,
    destination_userID INT NOT NULL,
    date_posted datetime,
    status ENUM('PENDING', 'CANCELED', 'FINISHED'),

    FOREIGN KEY (toAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (fromAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (origin_userID) REFERENCES Users(userID),
    FOREIGN KEY (destination_userID) REFERENCES Users(userID),
    FOREIGN KEY (transferID) REFERENCES Transactions(transactionID)

 );

 CREATE TABLE IF NOT EXISTS Users
 (
    userID INT PRIMARY KEY auto_increment,
    userName VARCHAR(225) NOT NULL,
    email VARCHAR(225) NOT NULL,
    password VARCHAR(225) NOT NULL,
    pinNumber CHAR(6) NOT NULL,
    accountNumber VARCHAR(225) NOT NULL,
    role VARCHAR(225) NOT NULL,
    isAdmin BOOL,
    isEnabled BOOL
 );

 CREATE TABLE Connections(
    connectionID BIGINT PRIMARY KEY auto_increment,
    dbServer VARCHAR(225) NOT NULL,
    dbPort INT NOT NULL,
    dbName VARCHAR(225) NOT NULL,
    dbUser VARCHAR(225) NOT NULL,
    dbPass VARCHAR(225) NOT NULL,
    dbURL VARCHAR(225) NOT NULL,
    dbDriver VARCHAR(225) NOT NULL,
    dbType ENUM('MYSQL', 'SSQL', 'PGSQL'),
    dateModified datetime
 );

 CREATE TABLE IF NOT EXISTS CheckingAccount
 (
    id int primary key auto_increment,
    accountCode VARCHAR(2) NOT NULL,
    userID INT NOT NULL,
    accountName VARCHAR(225) NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    interest_rate DECIMAL(10, 2) NOT NULL,
    minimum_balance DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY(userID) REFERENCES users(userID)
 );

 CREATE TABLE IF NOT EXISTS UserLog
 (
    id INT PRIMARY KEY AUTO_INCREMENT,
    userID INT NOT NULL,
    username VARCHAR(225) NOT NULL,
    lastLogin datetime,
    lastLogout datetime,
    sessionDuration INT,
    loginSuccess BOOLEAN,
    ipAddress VARCHAR(45) NOT NULL,
    sessionToken VARCHAR(255),

    FOREIGN KEY (userID) REFERENCES Users(userID)
 );

 CREATE TABLE IF NOT EXISTS Account(
    acctID INT PRIMARY KEY auto_increment NOT NULL,
    accountCode VARCHAR(225) NOT NULL,
    userID INT NOT NULL,
    aSecID INT NOT NULL,
    accountName VARCHAR(225) NOT NULL,
    balance DECIMAL(10, 3) NOT NULL,
    interest DECIMAL(10, 3) NOT NULL,
    accountType VARCHAR(225) NOT NULL,
    hasDividend BOOL,
    isRentAccount BOOL,
    hasMortgage BOOL,

    FOREIGN KEY (userID) REFERENCES Users(userID)
);


 CREATE TABLE IF NOT EXISTS BalanceHistory
 (
     historyID BIGINT PRIMARY KEY AUTO_INCREMENT,
     accountID INT NOT NULL,
     transactionID BIGINT NOT NULL,
     balance DECIMAL(10, 2) NOT NULL,
     adjustedBalance DECIMAL(10, 2) NOT NULL,
     lastBalance DECIMAL(10, 2) NOT NULL,
     transactionType ENUM('Deposit', 'Withdraw', 'Purchase', 'Transfer'),
     createdBy VARCHAR(225) NOT NULL,
     createdAt datetime NOT NULL,
     updatedBy VARCHAR(225) NOT NULL,
     posted datetime NOT NULL,

     FOREIGN KEY(accountID) REFERENCES Account(accountID),
     FOREIGN KEY(transactionID) REFERENCES Transactions(transactionID)
 );

 CREATE TABLE IF NOT EXISTS AccountDetails (
    aID BIGINT PRIMARY KEY auto_increment,
    historyID BIGINT NOT NULL,
    accountID INT NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    pending DECIMAL(10, 2) NOT NULL,
    available DECIMAL(10, 2) NOT NULL,

    FOREIGN KEY (accountID) REFERENCES Account(acctID),
    FOREIGN KEY (historyID) REFERENCES BalanceHistory(historyID)
 );

INSERT INTO Users (userID, userName, email, password, pinNumber, accountNumber, isAdmin, isEnabled) VALUES
    (1, 'AKing94', 'alex@utahkings.com', '$2a$10$aqfzLM6TU/NLb.BiwV9LJuNg96YYTm1jZzd8bWhzdfcwaUzh.o922', '5988', '22-34-87', 'ADMIN', 1, 1);