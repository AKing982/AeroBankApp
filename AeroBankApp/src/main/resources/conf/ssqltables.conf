CREATE TABLE registration (
    id INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
    firstName VARCHAR(225) NOT NULL,
    lastName VARCHAR(225) NOT NULL,
    username VARCHAR(225) NOT NULL,
    email VARCHAR(225) NOT NULL,
    address VARCHAR(225) NOT NULL,
    zipcode VARCHAR(9) NOT NULL,
    pinNumber VARCHAR(8) NOT NULL,
    password VARCHAR(50) NOT NULL,
    deposit DECIMAL(10,2) NOT NULL
 );

CREATE TABLE Users
(
    userID INT PRIMARY KEY IDENTITY(1,1),
    userName VARCHAR(225) NOT NULL,
    email VARCHAR(225) NOT NULL,
    password VARCHAR(225) NOT NULL,
    pinNumber CHAR(6) NOT NULL,
    accountNumber VARCHAR(225) NOT NULL,
    role VARCHAR(225) NOT NULL,
    isAdmin BIT,
    isEnabled BIT
);

CREATE TABLE Account(
    acctID INT PRIMARY KEY IDENTITY(1,1) NOT NULL,
    accountCode VARCHAR(225) NOT NULL,
    userID INT NOT NULL,
    aSecID INT NOT NULL,
    accountName VARCHAR(225) NOT NULL,
    balance DECIMAL(10, 3) NOT NULL,
    interest DECIMAL(10, 3) NOT NULL,
    accountType VARCHAR(225) NOT NULL,
    hasDividend BIT,
    isRentAccount BIT,
    hasMortgage BIT,
    FOREIGN KEY (userID) REFERENCES Users(userID)
);

CREATE TABLE Account_Users
(
    acctID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY(acctID, userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(userID) REFERENCES Users(userID)
);

CREATE TABLE SchedulerCriteria
(
    scheduleCriteriaID BIGINT PRIMARY KEY IDENTITY(1,1),
    schedulerUserID INT NOT NULL,
    scheduledTime DATETIME NOT NULL,
    scheduledDate DATETIME NOT NULL,
    scheduleType VARCHAR(50), -- SQL Server does not support ENUM, consider using CHECK constraint or a lookup table for restricted values
    status VARCHAR(50),
    priority INT NOT NULL,
    lastRunTime DATETIME,
    nextRunTime DATETIME,
    FOREIGN KEY (schedulerUserID) REFERENCES Users(userID)
);

CREATE TABLE PaymentSchedule (
    paymentID BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    payeeName VARCHAR(225) NOT NULL,
    payeeAccountCode VARCHAR(2) NOT NULL,
    paymentAmount DECIMAL(10, 2) NOT NULL,
    paymentDescription VARCHAR(225) NOT NULL,
    paymentMethod VARCHAR(50) NOT NULL,
    currencyCode VARCHAR(3) NOT NULL,
    customerReference VARCHAR(225) NOT NULL,
    paymentType VARCHAR(225) NOT NULL,
    postedDate DATETIME NOT NULL,
    paymentDueDate DATETIME NOT NULL,
    isRecurring BIT DEFAULT 0,
    isDeleted BIT DEFAULT 0,
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (acctID) REFERENCES Account (acctID)
);

CREATE TABLE AccountSecurity(
    aSecID BIGINT PRIMARY KEY IDENTITY(1,1) NOT NULL,
    acctID INT NOT NULL,
    isEnabled BIT DEFAULT 1,
    withdrawLimit INT NOT NULL,
    transferLimit INT NOT NULL,
    feesEnabled BIT DEFAULT 1,
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
);

CREATE TABLE PendingTransactions(
    pendingID BIGINT PRIMARY KEY IDENTITY(1,1),
    referenceID BIGINT NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    description VARCHAR(225) NOT NULL,
    pendingAmount DECIMAL(10, 2) NOT NULL,
    initiatedAt DATETIME DEFAULT CURRENT_TIMESTAMP,
    status_change DATETIME,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
);

CREATE TABLE Transactions(
    transactionID BIGINT PRIMARY KEY IDENTITY(1,1),
    transactionType VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    referenceID BIGINT NOT NULL,
    userID INT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    debit DECIMAL(10, 2),
    credit DECIMAL(10, 2),
    description VARCHAR(225) NOT NULL,
    posted DATETIME,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY (userID) REFERENCES Users(userID),
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
);

CREATE TABLE Transactions_Users(
    acctID INT NOT NULL,
    userID INT NOT NULL,
    PRIMARY KEY(acctID, userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID),
    FOREIGN KEY(userID) REFERENCES Users(userID)
);

CREATE TABLE Purchases(
    purchaseID BIGINT PRIMARY KEY IDENTITY(1,1),
    userID INT NOT NULL,
    acctID INT NOT NULL,
    description VARCHAR(225) NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    isDebit BIT,
    isCredit BIT,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    posted DATETIME,
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (acctID) REFERENCES Account(acctID)
);

CREATE TABLE Withdrawals(
    withdrawID BIGINT PRIMARY KEY IDENTITY(1,1),
    userID INT NOT NULL,
    fromAcctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted DATETIME,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY(fromAcctID) REFERENCES Account(acctID),
    FOREIGN KEY (userID) REFERENCES Users (userID)
);

CREATE TABLE Transfers(
    transferID BIGINT PRIMARY KEY IDENTITY(1,1),
    toAccountID INT NOT NULL,
    fromAccountID INT NOT NULL,
    toAccountCode VARCHAR(225) NOT NULL,
    fromAccountCode VARCHAR(225) NOT NULL,
    transferAmount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    origin_userID INT NOT NULL,
    destination_userID INT NOT NULL,
    date_posted DATETIME,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY (toAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (fromAccountID) REFERENCES Account(acctID),
    FOREIGN KEY (origin_userID) REFERENCES Users(userID),
    FOREIGN KEY (destination_userID) REFERENCES Users(userID)
);

CREATE TABLE Deposits(
    depositID BIGINT PRIMARY KEY IDENTITY(1,1),
    userID INT NOT NULL,
    acctID INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    description VARCHAR(225) NOT NULL,
    posted DATETIME,
    scheduledDate DATETIME,
    scheduledTime TIME,
    scheduledInterval VARCHAR(225) NOT NULL,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY(userID) REFERENCES Users(userID),
    FOREIGN KEY(acctID) REFERENCES Account(acctID)
);

-- Queue tables, similar adjustments
CREATE TABLE DepositQueue(
    queueID INT PRIMARY KEY IDENTITY(1,1),
    depositID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY(depositID) REFERENCES Deposits(depositID)
);

CREATE TABLE WithdrawQueue(
    queueID INT PRIMARY KEY IDENTITY(1,1),
    withdrawID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY(withdrawID) REFERENCES Withdrawals(withdrawID)
);

CREATE TABLE TransferQueue(
    tQueueID INT PRIMARY KEY IDENTITY(1,1),
    transferID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY(transferID) REFERENCES Transfers(transferID)
);

CREATE TABLE PurchaseQueue(
    pQueueID INT PRIMARY KEY IDENTITY(1,1),
    purchaseID BIGINT NOT NULL,
    queuedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    FOREIGN KEY(purchaseID) REFERENCES Purchases(purchaseID)
);

CREATE TABLE Connections(
    connectionID BIGINT PRIMARY KEY IDENTITY(1,1),
    dbServer VARCHAR(225) NOT NULL,
    dbPort INT NOT NULL,
    dbName VARCHAR(225) NOT NULL,
    dbUser VARCHAR(225) NOT NULL,
    dbPass VARCHAR(225) NOT NULL,
    dbURL VARCHAR(225) NOT NULL,
    dbDriver VARCHAR(225) NOT NULL,
    dbType VARCHAR(50), -- Originally ENUM in MySQL. Consider using a lookup table or CHECK constraint in SQL Server.
    dateModified DATETIME
);

CREATE TABLE CheckingAccount
(
    id INT PRIMARY KEY IDENTITY(1,1),
    accountCode VARCHAR(2) NOT NULL,
    userID INT NOT NULL,
    accountName VARCHAR(225) NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    interest_rate DECIMAL(10, 2) NOT NULL,
    minimum_balance DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY(userID) REFERENCES Users(userID)
);

CREATE TABLE UserLog
(
    id INT PRIMARY KEY IDENTITY(1,1),
    userID INT NOT NULL,
    lastLogin DATETIME,
    lastLogout DATETIME,
    sessionDuration INT,
    loginSuccess BIT,
    loginAttempts INT,
    FOREIGN KEY (userID) REFERENCES Users(userID)
);

CREATE TABLE BalanceHistory
(
    historyID BIGINT PRIMARY KEY IDENTITY(1,1),
    accountID INT NOT NULL,
    transactionID BIGINT NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    adjustedBalance DECIMAL(10, 2) NOT NULL,
    lastBalance DECIMAL(10, 2) NOT NULL,
    transactionType VARCHAR(50), -- Consider using a lookup table or CHECK constraint
    createdBy VARCHAR(225) NOT NULL,
    createdAt DATETIME NOT NULL,
    updatedBy VARCHAR(225) NOT NULL,
    posted DATETIME NOT NULL,
    FOREIGN KEY(accountID) REFERENCES Account(acctID),
    FOREIGN KEY(transactionID) REFERENCES Transactions(transactionID)
);

CREATE TABLE AccountDetails
(
    aID BIGINT PRIMARY KEY IDENTITY(1,1),
    historyID BIGINT NOT NULL,
    accountID INT NOT NULL,
    balance DECIMAL(10, 2) NOT NULL,
    pending DECIMAL(10, 2) NOT NULL,
    available DECIMAL(10, 2) NOT NULL,
    FOREIGN KEY (accountID) REFERENCES Account(acctID),
    FOREIGN KEY (historyID) REFERENCES BalanceHistory(historyID)
);

CREATE TABLE Notifications
(
    notificationID BIGINT PRIMARY KEY IDENTITY(1,1),
    userID INT NOT NULL,
    message VARCHAR(225) NOT NULL,
    sent DATETIME NOT NULL,
    hasBeenRead BIT DEFAULT 0,
    priority INT NOT NULL,
    notificationType VARCHAR(50) NOT NULL,
    transactionID BIGINT,
    FOREIGN KEY (userID) REFERENCES Users (userID),
    FOREIGN KEY (transactionID) REFERENCES Transactions (transactionID)
);

CREATE TABLE EmailServer
(
    id BIGINT PRIMARY KEY IDENTITY(1,1),
    host VARCHAR(225) NOT NULL,
    port INT NOT NULL,
    username VARCHAR(225) NOT NULL,
    password VARCHAR(225) NOT NULL,
    isTLS BIT DEFAULT 0
);

INSERT INTO Users (userID, userName, email, password, pinNumber, accountNumber, role, isAdmin, isEnabled) VALUES
    (1, 'AKing94', 'alex@utahkings.com', '$2a$10$aqfzLM6TU/NLb.BiwV9LJuNg96YYTm1jZzd8bWhzdfcwaUzh.o922', '5988', '22-34-87', 'ADMIN', 1, 1);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage)
VALUES (1, 'A1', 1, 0, 'Alex Checking', '1215.000', '0.00', 'CHECKING', false, false, false);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage)
VALUES (2, 'A2', 1, 0, 'Alex Savings', '3400.000', '0.00', 'SAVINGS', false, false, false);

INSERT INTO Account (acctID, accountCode, userID, aSecID, accountName, balance, interest, accountType, hasDividend, isRentAccount, hasMortgage)
VALUES (3, 'A3', 1, 0, 'Alex Rent', '1628.000', '0.00', 'RENT', false, false, false);

INSERT INTO Account_Users (acctID, userID) VALUES (1, 1);
INSERT INTO Account_Users (acctID, userID) VALUES (2, 1);
INSERT INTO Account_Users (acctID, userID) VALUES (3, 1);
